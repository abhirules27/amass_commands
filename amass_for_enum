Source: https://medium.com/@noobhax/my-recon-process-dns-enumeration-d0e288f81a8a
---------------------------------------------------------------------------------------------------------
Step:01   Checking if the domain has wildcard configuration. 

dig @1.1.1.1 A,CNAME {test321123,testingforwildcard,plsdontgimmearesult}.<domain> +short | wc -l
---------------------------------------------------------------------------------------------------------
Step: 02  Using AMASS

$ amass -src -ip -active -brute -d <domain>
Play around with the -active, -brute, -noalts and -norecursion arguments.

$ amass -src -ip -d <domain>
$ amass enum -active -d <domain> -dir <path_of_directory> -o <Path_of_Output_File> -rf <Path_of_Resolver_File_50>
$ amass enum -passive -d <domain> -dir <path_of_directory> -o <Path_of_Output_File> -rf <Path_of_Resolver_File_50>



---------------------------------------------------------------------------------------------------------
Command to Extract Host Names only
$ cat amass_output/amass.txt | cut -d']' -f 2 | awk '{print $1}' | sort -u > hosts-amass.txt

Example:
From:
[Entrust]         autodiscover.tesla.com 209.11.133.61
[Bing]            mobile.tesla.com 209.133.79.82
[HackerTarget]    comparison.tesla.com 64.125.183.133
[Crtsh]           mfamobile-dev.tesla.com 205.234.27.209
[Forward DNS]     tesla.com 209.133.79.61

To:
autodiscover.tesla.com 
mobile.tesla.com 
comparison.tesla.com 
mfamobile-dev.tesla.com 
tesla.com

For IP Addresses only: Use $2
---------------------------------------------------------------------------------------------------------
Command to Extract IPv4 only

grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | sort -u
---------------------------------------------------------------------------------------------------------
Search crt.sh for hosts 
jq is a command line JSON processor: extract certain pieces of data from the returned response
sed is used to remove double quotes and hosts prepended with *.
Then, sorted and duplicates removed. 
Then, saves ashosts-crtsh.txt

$ curl -s "https://crt.sh/?q=%.<domain>&output=json" | jq '.[].name_value' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u > hosts-crtsh.txt
---------------------------------------------------------------------------------------------------------
Same operation but from Cert Spotter.

$ curl -s https://certspotter.com/api/v0/certs\?domain\=$1 | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u > hosts-certspotter.txt
---------------------------------------------------------------------------------------------------------
Creating a final wordlist using a dictionary list using "DNS discovery" from "SecLists"

$ sed 's/$/.<domain>/' subdomains-top1mil-20000.txt > hosts-wordlist.txt
---------------------------------------------------------------------------------------------------------
Command to append .<domain> to every line and write the output to hosts-wordlist.txt

$ cat subdomains-top1mil-20000.txt
www
mail
ftp
...

$ sed 's/$/.example.com/' subdomains-top1mil-20000.txt > hosts-wordlist.txt

$ cat hosts-wordlist.txt
www.example.com
mail.example.com
ftp.example.com
...
---------------------------------------------------------------------------------------------------------
The Final Wordlist

After 
(a) Amass has completed
(b) Manual wordlists has been created
It’s time to create the final list which will be used for MassDNS.

I now have the following files

    hosts-amass.txt
    hosts-crtsh.txt
    hosts-certspotter.txt
    hosts-wordlist.txt

This will be merged, sorted and duplicates will be removed and written to a file named hosts-all.txt.

$ cat hosts-amass.txt hosts-crtsh.txt hosts-certspotter.txt hosts-wordlist.txt | sort -u > hosts-all.txt
---------------------------------------------------------------------------------------------------------
Staying in scope: Removing Out of Scope Domain Names

Most of the times there are some domains and hosts that are considered out of scope, 
meaning that it’s against the rules to perform any type of testing on them. 
Add out of scope domain to a file named "hosts-ignore.txt"

foo\.example\.com$
bar\.example\.com$
...

Use grep to remove out of scope hosts and create a hosts-inscope.txt.

$ grep -vf hosts-ignore.txt hosts-all.txt > hosts-inscope.txt

A quick explanation of the -Fxvf arguments

-v - Show only the results that does not match
-f - Read patterns from file

In human words this means, read pattern as strings from hosts-ignore.txt 
return everything from hosts-all.txt that is not a 100% match to any of the patterns.
---------------------------------------------------------------------------------------------------------
MassDNS
Note: This step could be accomplished with Masscan alone, 
but from my experience it will be slower because. 
Another reason why I use MassDNS is because Masscan is only needed if I need to look for additional ports.

After having created a final list to work with, I turn to MassDNS to determine which of the hosts are actually online.

$ massdns -r resolvers.txt -t A -o S -w massdns.out hosts-inscope.txt
---------------------------------------------------------------------------------------------------------
MassDNS Output

Looks like:

inside-stg.tesla.com. A 209.10.208.14
events.tesla.com. A 13.111.47.195
lr.tesla.com. A 36.86.63.182
marketing.tesla.com. A 13.111.47.196
...

The first part is the host, second part is the DNS record type such as A, CNAME, etc. 
And the final part is the IP/host which the host resolved to.

Then again it’s time to parse some data.

$ cat massdns.out | awk '{print $1}' | sed 's/.$//' | sort -u > hosts-online.txt
---------------------------------------------------------------------------------------------------------
Finding Port No using Masscan (NOT NMAP AS IT'S SLOW)

Step 1:  Get all the IP’s from the previous massdns.out

         $ cat massdns.out | awk '{print $3}' | sort -u | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > ips-online.txt

Step 2:  Run MASSCAN
Providing it with the list of online IP’s. 
The following command will send 10,000 packets every second and check all 65535 ports. 
It will report back only the ones that are seen as open, and output will be written to a simple list file named masscan.out.

$ sudo masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out

The content of masscan.out will look something similar to this:

$ cat masscan.out 
#masscan
open tcp 25 13.111.18.27 1556466271
open tcp 80 209.133.79.61 1556466775
open tcp 443 209.133.79.66 1556467350
...

Once this is complete, use nmap to see which services that are running on each port:

$ nmap -sV -p[port,port,...] [ip]

---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------







